apply plugin: 'com.android.library'
apply plugin: 'jacoco'

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }

//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"

//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
//    ])
//}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

//    testOptions.unitTests.all {
//        testLogging {
//            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
//        }
//    }
}

dependencies {
    compile rootProject.ext.dependencies["appcompat-v7"];
    compile rootProject.ext.dependencies["support-v4"];
    compile rootProject.ext.dependencies["design"];

}
